package com.selimkose.euniversitem;

import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.res.Configuration;
import android.os.Build;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;
import android.os.CountDownTimer;


import androidx.appcompat.app.AppCompatActivity;
import androidx.annotation.NonNull;
import androidx.biometric.BiometricPrompt;
import androidx.core.content.ContextCompat;

import com.android.volley.AuthFailureError;
import com.android.volley.DefaultRetryPolicy;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;
import com.journeyapps.barcodescanner.CaptureActivity;
import com.selimkose.euniversitem.utils.SecurePreferences;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;



public class StudentMainPage extends AppCompatActivity {

    private static final int REQUEST_CODE_SCAN = 100; // QR kod tarama isteÄŸi iÃ§in kullanÄ±lan sabit
    private CountDownTimer countDownTimer;
    private long timeLeftInMillis = 15 * 60 * 1000; // 15 dakika (15 dakika * 60 saniye * 1000 ms)
    private AlertDialog customDialog;
    private TextView dynamicTextView;
    private boolean isCountdownActive = false;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.student_main_page);

        // SecurePreferences'dan veriyi Ã§ekme
        SecurePreferences securePreferences = SecurePreferences.getInstance(this);
        String ogrenci_adi = securePreferences.get("ogrenci_adi", "Ad");
        String ogrenci_soyadi = securePreferences.get("ogrenci_soyadi", "Soyad");

        // Ä°sim ve soyismi birleÅŸtirme
        String fullName = ogrenci_adi + " " + ogrenci_soyadi;

        // Toast ile yazdÄ±rma
        Toast.makeText(this, "Merhaba " + fullName + " ðŸ‘‹", Toast.LENGTH_LONG).show();

        // QR Kod Okuma Butonunu tanÄ±mla
        Button qrCodeButton = findViewById(R.id.qrCodeButton);

        // QR kod okutma butonuna tÄ±klanabilirlik ekle
        qrCodeButton.setOnClickListener(view -> {
            // BitiÅŸ tarihini al
            long endTime = getEndTime();
            long currentTime = System.currentTimeMillis();

            if (endTime > currentTime) {
                // SÃ¼re bitmemiÅŸse, kalan zamanÄ± gÃ¶ster
                long remainingTime = endTime - currentTime;
                showProgressDialog(remainingTime);
            } else {
                // SÃ¼re bitmiÅŸse, QR kod tarayÄ±cÄ±yÄ± baÅŸlat
                Intent intent = new Intent(StudentMainPage.this, CaptureActivity.class);
                startActivityForResult(intent, REQUEST_CODE_SCAN);
            }
        });

        Button sendCodeButton = findViewById(R.id.sendCodeButton);
        EditText inputCodeEditText = findViewById(R.id.inputYoklamaCode);

        sendCodeButton.setOnClickListener(view -> {
            String code = inputCodeEditText.getText().toString().trim();

            // SecurePreferences'dan veriyi Ã§ekme
            String ogrenci_no = securePreferences.get("ogrenci_no", "ogrenci_no");

            if (code.length() == 8) {
                Executor executor = ContextCompat.getMainExecutor(this);

                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
                    // BiometricPrompt.Callback tanÄ±mla
                    BiometricPrompt.AuthenticationCallback callback = new BiometricPrompt.AuthenticationCallback() {
                        @Override
                        public void onAuthenticationError(int errorCode, @NonNull CharSequence errString) {
                            super.onAuthenticationError(errorCode, errString);

                            if (errorCode == 13) {
                                runOnUiThread(() -> Toast.makeText(StudentMainPage.this, "Ä°ptal Edildi!", Toast.LENGTH_SHORT).show());
                            } else {
                                runOnUiThread(() -> Toast.makeText(StudentMainPage.this, "Hata: " + errString, Toast.LENGTH_SHORT).show());
                            }
                        }

                        @Override
                        public void onAuthenticationSucceeded(@NonNull BiometricPrompt.AuthenticationResult result) {
                            super.onAuthenticationSucceeded(result);
                            runOnUiThread(() -> {
                                Toast.makeText(StudentMainPage.this, "DoÄŸrulama BaÅŸarÄ±lÄ±!", Toast.LENGTH_SHORT).show();
                                yoklamaKatil(code, ogrenci_no);
                            });
                        }
                    };

                    // BiometricPrompt nesnesini oluÅŸtur
                    BiometricPrompt biometricPrompt = new BiometricPrompt(this, executor, callback);

                    // BiometricPrompt PromptInfo nesnesi oluÅŸtur
                    BiometricPrompt.PromptInfo promptInfo = new BiometricPrompt.PromptInfo.Builder()
                            .setTitle("Biometrik DoÄŸrulama")
                            .setSubtitle("Devam etmek iÃ§in parmak izi veya biyometrik kimlik doÄŸrulamasÄ± yapÄ±n.")
                            .setNegativeButtonText("Ä°ptal")
                            .build();

                    // BiometricPrompt baÅŸlat
                    biometricPrompt.authenticate(promptInfo);
                } else {
                    // Biometric doÄŸrulama API 28 altÄ± cihazlarda desteklenmiyor
                    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.P) {
                        new AlertDialog.Builder(this)
                                .setTitle("UyarÄ±")
                                .setMessage("CihazÄ±nÄ±z biyometrik doÄŸrulamayÄ± desteklemiyor.")
                                .setPositiveButton("Tamam", null)
                                .show();
                    }
                }
            } else {
                Toast.makeText(StudentMainPage.this, "LÃ¼tfen geÃ§erli 8 haneli bir kod girin.", Toast.LENGTH_SHORT).show();
            }
        });

        // Ã‡Ä±kÄ±ÅŸ butonunu tanÄ±mla
        ImageButton logoutButton = findViewById(R.id.logoutButton);
        logoutButton.setOnClickListener(view -> {
            // alert dialog oluÅŸtur
            AlertDialog.Builder builder = new AlertDialog.Builder(StudentMainPage.this);
            builder.setTitle("Ã‡Ä±kÄ±ÅŸ Yap");
            builder.setMessage("Ã‡Ä±kÄ±ÅŸ yapmayÄ± onaylÄ±yor musunuz?");
            builder.setNegativeButton("HayÄ±r", null);
            builder.setPositiveButton("Evet", new DialogInterface.OnClickListener() {
                public void onClick(DialogInterface dialog, int id) {
                    securePreferences.clear();
                    Intent intent = new Intent(StudentMainPage.this, MainActivity.class);
                    startActivity(intent);
                    finish();
                }
            });

            AlertDialog dialog = builder.create();
            dialog.show();
        });

        ImageView logoImageView = findViewById(R.id.logoImage);

        if (isDarkMode()) {
            // KararmÄ±ÅŸ temada logo deÄŸiÅŸtir
            logoImageView.setImageResource(R.drawable.logobeyaz);
        } else {
            // AÃ§Ä±k temada logo deÄŸiÅŸtir
            logoImageView.setImageResource(R.drawable.logosiyah);
        }

    }

    private boolean isDarkMode() {
        int nightModeFlags = getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;
        return nightModeFlags == Configuration.UI_MODE_NIGHT_YES;
    }

    @Override
    protected void onResume() {
        super.onResume();
        // Arka planda iken tekrar aÃ§Ä±ldÄ±ÄŸÄ±nda mesajÄ± gÃ¶stermemek iÃ§in onResume'da herhangi bir iÅŸlem yapmadÄ±k.
    }


    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        // QR kod tarama iÅŸlemi tamamlandÄ±ÄŸÄ±nda
        if (requestCode == REQUEST_CODE_SCAN && resultCode == RESULT_OK) {
            // QR koddan gelen veri
            String qrCodeResult = data.getStringExtra("SCAN_RESULT");

            String veri = qrCodeResult;

            String[] veriler = veri.split("-");
            String yoklama_kodu = veriler[1];

            // SecurePreferences'dan veriyi Ã§ekme
            SecurePreferences securePreferences = SecurePreferences.getInstance(this);
            String ogrenci_no = securePreferences.get("ogrenci_no", "ogrenci_no");

            Executor executor = ContextCompat.getMainExecutor(this);

            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
                // BiometricPrompt.Callback tanÄ±mla
                BiometricPrompt.AuthenticationCallback callback = new BiometricPrompt.AuthenticationCallback() {
                    @Override
                    public void onAuthenticationError(int errorCode, @NonNull CharSequence errString) {
                        super.onAuthenticationError(errorCode, errString);

                        if (errorCode == 13) {
                            runOnUiThread(() -> Toast.makeText(StudentMainPage.this, "Ä°ptal Edildi!", Toast.LENGTH_SHORT).show());
                        } else {
                            runOnUiThread(() -> Toast.makeText(StudentMainPage.this, "Hata: " + errString, Toast.LENGTH_SHORT).show());
                        }
                    }

                    @Override
                    public void onAuthenticationSucceeded(@NonNull BiometricPrompt.AuthenticationResult result) {
                        super.onAuthenticationSucceeded(result);
                        runOnUiThread(() -> {
                            Toast.makeText(StudentMainPage.this, "DoÄŸrulama BaÅŸarÄ±lÄ±!", Toast.LENGTH_SHORT).show();
                            yoklamaKatil(yoklama_kodu, ogrenci_no);
                        });
                    }
                };

                // BiometricPrompt nesnesini oluÅŸtur
                BiometricPrompt biometricPrompt = new BiometricPrompt(this, executor, callback);

                // BiometricPrompt PromptInfo nesnesi oluÅŸtur
                BiometricPrompt.PromptInfo promptInfo = new BiometricPrompt.PromptInfo.Builder()
                        .setTitle("Biometrik DoÄŸrulama")
                        .setSubtitle("Devam etmek iÃ§in parmak izi veya biyometrik kimlik doÄŸrulamasÄ± yapÄ±n.")
                        .setNegativeButtonText("Ä°ptal")
                        .build();

                // BiometricPrompt baÅŸlat
                biometricPrompt.authenticate(promptInfo);
            } else {
                // Biometric doÄŸrulama API 28 altÄ± cihazlarda desteklenmiyor
                if (Build.VERSION.SDK_INT < Build.VERSION_CODES.P) {
                    new AlertDialog.Builder(this)
                            .setTitle("UyarÄ±")
                            .setMessage("CihazÄ±nÄ±z biyometrik doÄŸrulamayÄ± desteklemiyor.")
                            .setPositiveButton("Tamam", null)
                            .show();
                }
            }
        }
    }


    private void yoklamaKatil(String yoklamaKodu, String ogrenciNo) {
        String url = "https://api.e-universitem.com/yoklamalar/katil"; // API URL'sini yaz
        RequestQueue requestQueue = Volley.newRequestQueue(this);

        showLoader();

        // JSON objesi oluÅŸtur
        JSONObject katilParams = new JSONObject();
        try {
            katilParams.put("yoklama_kodu", yoklamaKodu);
            katilParams.put("ogrenci_no", ogrenciNo);
        } catch (JSONException e) {
            e.printStackTrace();
            Toast.makeText(StudentMainPage.this, "JSON oluÅŸturulurken hata oluÅŸtu!", Toast.LENGTH_SHORT).show();
            hideLoader();
            return;
        }

        // Ã–zelleÅŸtirilmiÅŸ JsonObjectRequest
        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(
                Request.Method.POST,
                url,
                katilParams,
                new Response.Listener<JSONObject>() {
                    @Override
                    public void onResponse(JSONObject response) {
                        hideLoader();

                        try {
                            // Gelen mesaja gÃ¶re iÅŸlem yap
                            String status = response.getString("status");
                            String message = response.getString("message");

                            if ("success".equals(status)) {
                                // BaÅŸarÄ±lÄ± mesajÄ±nÄ± gÃ¶ster
                                AlertDialog.Builder builder = new AlertDialog.Builder(StudentMainPage.this);
                                builder.setTitle("BaÅŸarÄ±yla KatÄ±ldÄ±nÄ±z!");
                                builder.setMessage("Yoklamaya baÅŸarÄ±yla katÄ±ldÄ±nÄ±z.");

                                // "Tamam" butonunu ekleyin ve butona tÄ±klanÄ±nca yapÄ±lacak iÅŸlemi belirtin
                                builder.setPositiveButton("Tamam", new DialogInterface.OnClickListener() {
                                    @Override
                                    public void onClick(DialogInterface dialog, int which) {
                                        // "Tamam" butonuna tÄ±klayÄ±nca yapÄ±lacak iÅŸlemler
                                        // Ã–rneÄŸin, ana sayfaya geri dÃ¶nebilirsiniz veya baÅŸka bir iÅŸlem yapabilirsiniz
                                        dialog.dismiss();  // Dialogu kapat
                                    }
                                });

                                // Dialog'u oluÅŸturup gÃ¶ster
                                AlertDialog dialog = builder.create();
                                dialog.show();
                            } else {
                                // Hata mesajÄ±nÄ± gÃ¶ster
                                AlertDialog.Builder builder = new AlertDialog.Builder(StudentMainPage.this);
                                builder.setTitle("Hata");
                                builder.setMessage(message);
                                builder.setPositiveButton("Tamam", null);
                                builder.show();

                                Toast.makeText(StudentMainPage.this, message, Toast.LENGTH_SHORT).show();

                                hideLoader();
                                return;
                            }

                        } catch (JSONException e) {
                            e.printStackTrace();
                            Toast.makeText(StudentMainPage.this, "YanÄ±t iÅŸlenirken hata oluÅŸtu!", Toast.LENGTH_SHORT).show();
                        }

                        // Loader'Ä± gizle
                        hideLoader();
                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        hideLoader();

                        if (error.networkResponse != null) {
                            int statusCode = error.networkResponse.statusCode;
                            String errorData = new String(error.networkResponse.data);

                            try {
                                // Gelen veri JSONObject formatÄ±nda
                                JSONObject errorResponse = new JSONObject(errorData);

                                // "message" alanÄ±nÄ± alÄ±yoruz (JSONArray olduÄŸu iÃ§in ilk elemanÄ± alÄ±yoruz)
                                JSONArray messageArray = errorResponse.optJSONArray("message");

                                // EÄŸer message array varsa, ilk mesajÄ± alalÄ±m
                                if (messageArray != null && messageArray.length() > 0) {
                                    String errorMessage = messageArray.getString(0);
                                    AlertDialog.Builder builder = new AlertDialog.Builder(StudentMainPage.this);
                                    builder.setTitle("Hata");
                                    builder.setMessage(errorMessage);
                                    builder.setPositiveButton("Tamam", null);
                                    builder.show();

                                    hideLoader();
                                    return;
                                } else {
                                    // EÄŸer "message" yoksa, varsayÄ±lan bir hata mesajÄ± gÃ¶ster
                                    String errorMessage = errorResponse.optString("message", "Bir hata oluÅŸtu!");
                                    AlertDialog.Builder builder = new AlertDialog.Builder(StudentMainPage.this);
                                    builder.setTitle("Hata");
                                    builder.setMessage(errorMessage);
                                    builder.setPositiveButton("Tamam", null);
                                    builder.show();

                                    hideLoader();
                                }

                                // Hata kodunu ve mesajÄ± konsola yazdÄ±r
                                System.out.println("Hata kodu: " + statusCode);
                                System.out.println("Hata Bilgisi: " + errorData);

                            } catch (JSONException e) {
                                // JSON parse hatasÄ± durumunda genel hata mesajÄ±
                                String errorMessage = "YanÄ±t iÅŸlenirken hata oluÅŸtu!";
                                Toast.makeText(StudentMainPage.this, errorMessage, Toast.LENGTH_SHORT).show();
                                System.out.println("JSON parsing error: " + e.getMessage());
                            }

                        } else {
                            // AÄŸ hatasÄ± durumu
                            System.out.println("Hata: " + error.getMessage());
                            Toast.makeText(StudentMainPage.this, "AÄŸ hatasÄ±: " + error.getMessage(), Toast.LENGTH_SHORT).show();
                        }

                        if (error instanceof com.android.volley.TimeoutError) {
                            Log.e("NetworkError", "Timeout occurred");
                            Toast.makeText(StudentMainPage.this, "Ä°nternet baÄŸlantÄ±nÄ±zÄ± kontrol edin!", Toast.LENGTH_SHORT).show();
                        } else if (error.networkResponse != null) {
                            Log.e("NetworkError", "Status Code: " + error.networkResponse.statusCode);
                        }

                    }
                }

        ) {
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                // Header bilgilerini buraya ekle
                Map<String, String> headers = new HashMap<>();
                headers.put("Content-Type", "application/json"); // JSON formatÄ±nda gÃ¶nderim
                headers.put("X-Api-Key", "c6533523ec7d0b5371a30269ef3d526064552c6f90f872618eebb14af33c2093"); // API anahtarÄ±nÄ± buraya ekle
                return headers;
            }
        };

        jsonObjectRequest.setRetryPolicy(new com.android.volley.DefaultRetryPolicy(
                30000, // Timeout sÃ¼resi (ms cinsinden)
                DefaultRetryPolicy.DEFAULT_MAX_RETRIES, // Tekrar deneme sayÄ±sÄ±
                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT // Geri dÃ¶nÃ¼ÅŸ katsayÄ±sÄ±
        ));

        // Ä°steÄŸi sÄ±raya ekle
        requestQueue.add(jsonObjectRequest);
    }

    private ProgressDialog progressDialog;

    private void showLoader() {
        progressDialog = new ProgressDialog(StudentMainPage.this);
        progressDialog.setMessage("Ä°ÅŸlem yapÄ±lÄ±yor, lÃ¼tfen bekleyin...");
        progressDialog.setCancelable(false); // KullanÄ±cÄ± iptal edemez
        progressDialog.show();
    }


    private void hideLoader() {
        if (progressDialog != null && progressDialog.isShowing()) {
            progressDialog.dismiss();
        }
    }

    private void saveEndTime(long endTimeInMillis) {
        SecurePreferences securePreferences = SecurePreferences.getInstance(this);
        securePreferences.save("end_time", String.valueOf(endTimeInMillis));
    }

    private long getEndTime() {
        SecurePreferences securePreferences = SecurePreferences.getInstance(this);
        String endTime = securePreferences.get("end_time", "0");
        return Long.parseLong(endTime);
    }

    private void showProgressDialog(long remainingTimeInMillis) {
        // Sadece zamanlayÄ±cÄ± aktifse progress dialogu gÃ¶ster
        if (isCountdownActive) {
            ProgressDialog progressDialog = new ProgressDialog(StudentMainPage.this);
            progressDialog.setMessage("Kalan sÃ¼re: " + formatTime(remainingTimeInMillis));
            progressDialog.setCancelable(false);
            progressDialog.show();

            // Geri sayÄ±m iÃ§in zamanlayÄ±cÄ± baÅŸlat
            new CountDownTimer(remainingTimeInMillis, 1000) {
                @Override
                public void onTick(long millisUntilFinished) {
                    // Kalan sÃ¼reyi gÃ¼ncelle
                    progressDialog.setMessage("Kalan sÃ¼re: " + formatTime(millisUntilFinished));
                }

                @Override
                public void onFinish() {
                    progressDialog.dismiss();
                    // SÃ¼re bitince QR kod tarama ekranÄ±nÄ± aÃ§
                    Intent intent = new Intent(StudentMainPage.this, CaptureActivity.class);
                    startActivityForResult(intent, REQUEST_CODE_SCAN);
                }
            }.start();
        }
    }

    // Zaman formatÄ±nÄ± dakika:saniye olarak dÃ¶ndÃ¼ren metot
    private String formatTime(long millis) {
        long minutes = millis / 1000 / 60;
        long seconds = (millis / 1000) % 60;
        return String.format("%02d:%02d", minutes, seconds);
    }

}


